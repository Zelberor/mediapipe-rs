/* automatically generated by rust-bindgen 0.59.2 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mediagraph_Landmark {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub visibility: f32,
    pub presence: f32,
}
#[test]
fn bindgen_test_layout_mediagraph_Landmark() {
    assert_eq!(
        ::std::mem::size_of::<mediagraph_Landmark>(),
        20usize,
        concat!("Size of: ", stringify!(mediagraph_Landmark))
    );
    assert_eq!(
        ::std::mem::align_of::<mediagraph_Landmark>(),
        4usize,
        concat!("Alignment of ", stringify!(mediagraph_Landmark))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mediagraph_Landmark>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mediagraph_Landmark),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mediagraph_Landmark>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mediagraph_Landmark),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mediagraph_Landmark>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mediagraph_Landmark),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mediagraph_Landmark>())).visibility as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mediagraph_Landmark),
            "::",
            stringify!(visibility)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mediagraph_Landmark>())).presence as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mediagraph_Landmark),
            "::",
            stringify!(presence)
        )
    );
}
pub const mediagraph_FeatureType_FACE: mediagraph_FeatureType = 0;
pub const mediagraph_FeatureType_FACES: mediagraph_FeatureType = 1;
pub const mediagraph_FeatureType_HAND: mediagraph_FeatureType = 2;
pub const mediagraph_FeatureType_HANDS: mediagraph_FeatureType = 3;
pub const mediagraph_FeatureType_POSE: mediagraph_FeatureType = 4;
pub const mediagraph_FeatureType_POSES: mediagraph_FeatureType = 5;
pub type mediagraph_FeatureType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mediagraph_Output {
    pub type_: mediagraph_FeatureType,
    pub name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_mediagraph_Output() {
    assert_eq!(
        ::std::mem::size_of::<mediagraph_Output>(),
        16usize,
        concat!("Size of: ", stringify!(mediagraph_Output))
    );
    assert_eq!(
        ::std::mem::align_of::<mediagraph_Output>(),
        8usize,
        concat!("Alignment of ", stringify!(mediagraph_Output))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mediagraph_Output>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mediagraph_Output),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mediagraph_Output>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mediagraph_Output),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
pub struct mediagraph_Detector__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct mediagraph_Detector {
    pub vtable_: *const mediagraph_Detector__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_mediagraph_Detector() {
    assert_eq!(
        ::std::mem::size_of::<mediagraph_Detector>(),
        8usize,
        concat!("Size of: ", stringify!(mediagraph_Detector))
    );
    assert_eq!(
        ::std::mem::align_of::<mediagraph_Detector>(),
        8usize,
        concat!("Alignment of ", stringify!(mediagraph_Detector))
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN10mediagraph8Detector6CreateEPKcPKNS_6OutputEh"]
    pub fn mediagraph_Detector_Create(
        graph_config: *const ::std::os::raw::c_char,
        outputs: *const mediagraph_Output,
        num_outputs: u8,
    ) -> *mut mediagraph_Detector;
}
impl mediagraph_Detector {
    #[inline]
    pub unsafe fn Create(
        graph_config: *const ::std::os::raw::c_char,
        outputs: *const mediagraph_Output,
        num_outputs: u8,
    ) -> *mut mediagraph_Detector {
        mediagraph_Detector_Create(graph_config, outputs, num_outputs)
    }
}
extern "C" {
    #[link_name = "\u{1}__ZN10mediagraph8DetectorD1Ev"]
    pub fn mediagraph_Detector_Detector_destructor(this: *mut mediagraph_Detector);
}
extern "C" {
    #[link_name = "\u{1}__ZN10mediagraph8Detector7ProcessEPhiiS1_"]
    pub fn mediagraph_Detector_Process(
        this: *mut ::std::os::raw::c_void,
        data: *mut u8,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        num_features: *mut u8,
    ) -> *mut mediagraph_Landmark;
}
#[repr(C)]
pub struct mediagraph_Effect__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct mediagraph_Effect {
    pub vtable_: *const mediagraph_Effect__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_mediagraph_Effect() {
    assert_eq!(
        ::std::mem::size_of::<mediagraph_Effect>(),
        8usize,
        concat!("Size of: ", stringify!(mediagraph_Effect))
    );
    assert_eq!(
        ::std::mem::align_of::<mediagraph_Effect>(),
        8usize,
        concat!("Alignment of ", stringify!(mediagraph_Effect))
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN10mediagraph6Effect6CreateEPKcS2_"]
    pub fn mediagraph_Effect_Create(
        graph_config: *const ::std::os::raw::c_char,
        output_node: *const ::std::os::raw::c_char,
    ) -> *mut mediagraph_Effect;
}
impl mediagraph_Effect {
    #[inline]
    pub unsafe fn Create(
        graph_config: *const ::std::os::raw::c_char,
        output_node: *const ::std::os::raw::c_char,
    ) -> *mut mediagraph_Effect {
        mediagraph_Effect_Create(graph_config, output_node)
    }
}
extern "C" {
    #[link_name = "\u{1}__ZN10mediagraph6EffectD1Ev"]
    pub fn mediagraph_Effect_Effect_destructor(this: *mut mediagraph_Effect);
}
extern "C" {
    #[link_name = "\u{1}__ZN10mediagraph6Effect7ProcessEPhii"]
    pub fn mediagraph_Effect_Process(
        this: *mut ::std::os::raw::c_void,
        data: *mut u8,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut u8;
}
